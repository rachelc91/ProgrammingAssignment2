a <-available.packages()
head(rownames(a),3)
install.packages(c("ggplot2, devtools"))
install.packages(c("ggplot2", "devtools"))
library(ggplot2)
search()
install.packages("KernSmooth")
library(KernSmooth)
clear
x <- 1:4
lapply(x, runif)
?runif
x <- lapply(1:4, runif)
x
class(x)
x <- list(a = matrix(1:4))
class(x)
data.frame(a = 1:4, b = 1:4)
list(a = 1:4, b = 1:4)
y <- list(a = 1:4, b = 1:4)
x <- data.frame(a = 1:4, b = 1:4)
y$a
x$a
class(x)
class(y)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
class(sapply(flag_colors,sum))
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lappy(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
uniqe_vals
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
getwd()
library(datasets)
data("iris")
?iris
head(iris)
iris
?tapply
mean(iris[101:150,1])
head(iris)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
?split
split(iris,Species)
split(iris,iris.Species)
split(iris,iris$Species)
head(mtcars)
split(mtcars$mpg,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl))
sapply(split(mtcars$mpg,mtcars$cyl),mean)
mean(mtcars$mpg,mtcars$cyl)
tapply(mtcars$mpg,mtcars$cyl,mean)
?tapply
sapply(mtcars,cyl,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
with(mtcars,tapply(mpg,cyl,mean))
?with
hrs_power <- with(mtcars,tapply(mpg,cyl,mean))
abs(hrs_power$4-hrs_power$8)
hrs_power$4
hrs_power
hrs_power[1]-hrs_power[8]
hrs_power[1]
hrs_power[1,2]
hrs_power[1]-hrs_power[3]
head(mtcars)
hrs_power <- with(mtcars,tapply(hp,cyl,mean))
hrs_power
hrs_power[1]-hrs_power[3]
debug(ls)
ls
?debug
ls(x-y)
get <- function() x
get(mean)
get(5)
get()
x = 5
get()
list(get = get)
ls
ls9
ls()
getwd()
setwd("/Users/rachelcoy/Documents/Coursera_R")
getwd()
load(makeVector)
library(makeVector)
makeVector
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
?run
source("cachemean.R")
makeVector()
makeVector(5)
makeVector(c[5,4,6])
veccy <- makeVector(c[5,4,6])
vecc
veccy
class(veccy)
getwd()
setwd("Users/rachelcoy/Documents/ProgrammingAssignment2")
setwd("Users/rachelcoy/Documents/ProgrammingAssignment2")
setwd("/Users/rachelcoy/Documents/ProgrammingAssignment2")
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
m <- mean(data, ...)
makeVector(1:15)
myVector <- makeVector(1:15)
myVectr$x
myVector$x
mVector$set
myVector$get
myVector$set
myVector$get()
myVector$set()
?solve
source("cachematrix.R")
x = matrix(1:6, nrow = 3, ncol = 2)
newcache <- makeCacheMatrix(x)
source("cachematrix.R")
newcache <- makeCacheMatrix(x)
cacheSolve(newcache)
x = matrix(1:6, nrow = 3, ncol = 3)
newcache <- makeCacheMatrix(x)
cacheSolve(newcache)
x = matrix(1:9, nrow = 3, ncol = 3)
newcache <- makeCacheMatrix(x)
cacheSolve(newcache)
x$getinverse()
newcache$getinverse()
newcache$get()
solve(newcache$get())
x = matrix(c(1,1,1,1,1,1,1,1,1), nrow = 3, ncol = 3)
newcache <- makeCacheMatrix(x)
solve(newcache$get())
x = matrix(c(1,1,4,1,1,3,1,1,2), nrow = 3, ncol = 3)
solve(x)
x = matrix(c(2,3,2,2), nrow = 2, ncol = 2)
solve(x)
newcache <- makeCacheMatrix(x)
cacheSolve(newcache)
newcache$set(matrix(c(-1,1,1.5,-1),nrow=2,ncol=2))
cacheSolve(newcache)
